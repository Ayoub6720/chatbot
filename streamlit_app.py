import streamlit as st
import random
import time
import requests
import json
import os
from datetime import datetime, timedelta

# Configuration de la page
st.set_page_config(
    page_title="Chatbot Assistance Acad√©mique UHA",
    page_icon="üß†",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Ajouter du CSS personnalis√© am√©lior√©
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(90deg, #054cff, #00b3ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 2rem;
    }
    
    .chat-container {
        max-height: 500px;
        overflow-y: auto;
        padding: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        margin-bottom: 1rem;
        background-color: #f8f9fa;
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 15px;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: row;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        animation: fadeIn 0.3s ease-in;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .chat-message-user {
        background: linear-gradient(135deg, #054cff, #0066ff);
        color: white;
        margin-left: 20%;
    }
    
    .chat-message-bot {
        background: linear-gradient(135deg, #00b3ff, #0099cc);
        color: white;
        margin-right: 20%;
    }
    
   .chat-avatar {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.4rem;
    margin-right: 1rem;
    background-color: rgba(255,255,255,0.2);
    flex-shrink: 0;
}
    .chat-content {
        flex-grow: 1;
        line-height: 1.5;
    }
    
    .timestamp {
        font-size: 0.8rem;
        opacity: 0.7;
        margin-top: 0.5rem;
    }
    
   .welcome-card {
    padding: 1rem 2rem;
    text-align: center;
    margin: 1rem 0;
}
    
    .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 0.5rem;
    }
    
    .status-online { background-color: #28a745; }
    .status-offline { background-color: #dc3545; }
    
    .sidebar-info {
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .nav-item {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        margin: 0.2rem 0;
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    
    .nav-item:hover {
        background-color: rgba(54, 162, 235, 0.1);
        transform: translateX(5px);
    }
    
    .nav-icon {
        font-size: 1.2rem;
        margin-right: 0.8rem;
        width: 20px;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Initialisation des variables de session
def init_session_state():
    """Initialise les variables de session si elles n'existent pas"""
    if "selected_page" not in st.session_state:
        st.session_state.selected_page = "üè† Accueil"
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "api_status" not in st.session_state:
        st.session_state.api_status = "online"  # Simul√© pour la d√©mo

# Fonction pour appeler l'API Mistral AI (am√©lior√©e avec gestion d'erreurs)
def get_mistral_response(prompt, conversation_history=None):
    """
    Appelle l'API Mistral AI avec une gestion d'erreurs robuste
    """
    api_key = "QwSJ9Kt4P9zKtgq9iQSA2o17JAbpOJ3b"  # √Ä d√©placer vers les secrets en production
    url = "https://api.mistral.ai/v1/chat/completions"
    
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    
    # Construire l'historique de conversation pour plus de contexte
    messages = [
        {
            "role": "system", 
            "content": """Vous √™tes un assistant IA fran√ßais sp√©cialis√© dans l'aide aux √©tudiants de l'Universit√© de Haute-Alsace (UHA). 
            Vous devez :
            - R√©pondre de mani√®re claire et p√©dagogique
            - Aider avec les questions acad√©miques, administratives et d'orientation
            - √ätre empathique et encourageant
            - Fournir des informations pr√©cises sur l'universit√© quand possible
            - Demander des clarifications si n√©cessaire"""
        }
    ]
    
    # Ajouter l'historique de conversation r√©cent (5 derniers messages max)
    if conversation_history:
        recent_history = conversation_history[-10:]  # Garder les 10 derniers messages
        for msg in recent_history:
            role = "user" if msg["is_user"] else "assistant"
            messages.append({"role": role, "content": msg["content"]})
    
    messages.append({"role": "user", "content": prompt})
    
    data = {
        "model": "mistral-small",  # Mod√®le plus performant
        "messages": messages,
        "temperature": 0.5,  # Un peu plus de cr√©ativit√©
        "max_tokens":500,  # Limiter la longueur des r√©ponses
    }
    
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=30)
        response.raise_for_status()
        result = response.json()
        return result["choices"][0]["message"]["content"]
    except requests.exceptions.Timeout:
        return "‚è±Ô∏è D√©sol√©, la r√©ponse prend trop de temps. Veuillez r√©essayer."
    except requests.exceptions.RequestException as e:
        st.error(f"Erreur de connexion √† l'API: {str(e)}")
        return "üîß Probl√®me technique temporaire. Veuillez r√©essayer dans quelques instants."
    except KeyError:
        return "ü§ñ R√©ponse inattendue de l'API. Veuillez reformuler votre question."
    except Exception as e:
        st.error(f"Erreur inattendue: {str(e)}")
        return "‚ùå Une erreur s'est produite. Veuillez contacter le support technique."

# Fonction pour afficher un message avec timestamp
def display_message(message, is_user=False, timestamp=None):
    """Affiche un message dans le chat avec style am√©lior√©"""
    avatar = "üë§" if is_user else "üß†"
    message_class = "chat-message-user" if is_user else "chat-message-bot"
    
    if timestamp is None:
        timestamp = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
    
    st.markdown(f"""
    <div class="chat-message {message_class}">
        <div class="chat-avatar">{avatar}</div>
        <div class="chat-content">
            {message}
            <div class="timestamp">{timestamp}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# Fonction pour la page Chatbot
def chatbot_page():
    """Page principale du chatbot"""
    
    # Indicateur de statut
    status_color = "status-online" if st.session_state.api_status == "online" else "status-offline"
    status_text = "En ligne" if st.session_state.api_status == "online" else "Hors ligne"
    
    st.markdown(f"""
    <div style="text-align: center; margin-bottom: 2rem;">
        <span class="status-indicator {status_color}"></span>
        <strong>Statut: {status_text}</strong>
    </div>
    """, unsafe_allow_html=True)
    
    # Conteneur de chat
    chat_container = st.container()
    
    with chat_container:
        
        # Afficher l'historique des messages
        if not st.session_state.messages:
            st.markdown("""
            <div style="text-align: center; color: #666;">
                üëã Bonjour ! Je suis votre assistant acad√©mique UHA.<br>
                Posez-moi vos questions sur vos √©tudes, les proc√©dures administratives, ou tout autre sujet acad√©mique !
            </div>
            """, unsafe_allow_html=True)
        
        for message in st.session_state.messages:
            display_message(
                message["content"], 
                message["is_user"], 
                message.get("timestamp", "")
            )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Zone de saisie am√©lior√©e
    st.markdown("### üí≠ Votre message")
    
    with st.form(key="message_form", clear_on_submit=True):
        col1, col2 = st.columns([4, 1])
        
        with col1:
            user_input = st.text_area(
                "Tapez votre message ici...", 
                height=100,
                placeholder="Ex: Comment puis-je m'inscrire √† l'UHA ?",
                key="user_input"
            )
        
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)  # Espacement
            submit_button = st.form_submit_button("üì§ Envoyer", use_container_width=True)
            clear_button = st.form_submit_button("üóëÔ∏è Effacer", use_container_width=True)
    
    # Traitement des actions
    if clear_button:
        st.session_state.messages = []
        st.rerun()
    
    if submit_button and user_input.strip():
        # Ajouter le message utilisateur
        timestamp = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
        st.session_state.messages.append({
            "content": user_input.strip(),
            "is_user": True,
            "timestamp": timestamp
        })
        
        # G√©n√©rer la r√©ponse du bot
        with st.spinner("ü§î Je r√©fl√©chis √† votre question..."):
            if st.session_state.api_status == "online":
                bot_response = get_mistral_response(user_input, st.session_state.messages)
            else:
                bot_response = "üîß Le service est temporairement indisponible. Veuillez r√©essayer plus tard."
        
        # Ajouter la r√©ponse du bot
        bot_timestamp = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
        st.session_state.messages.append({
            "content": bot_response,
            "is_user": False,
            "timestamp": bot_timestamp
        })
        
        st.rerun()

# Pages de contenu
def accueil_page():
    """Page d'accueil am√©lior√©e"""
    st.markdown("""
    <div class="welcome-card">
        <h1>üéì Bienvenue sur le Chatbot UHA</h1>
        <p>Votre assistant intelligent pour naviguer dans votre parcours universitaire</p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üí¨ D√©marrer une conversation", use_container_width=True):
            st.session_state.selected_page = "ü§ñ Chatbot"
            st.rerun()
    
    with col2:
        if st.button("üîê Se connecter", use_container_width=True):
            st.session_state.selected_page = "üîê Connexion"
            st.rerun()
    
    with col3:
        if st.button("üìö Liens utiles", use_container_width=True):
            st.session_state.selected_page = "üîó Liens Utiles"
            st.rerun()
    
    st.markdown("---")
    
    # Fonctionnalit√©s principales
    st.markdown("### üöÄ Que puis-je faire pour vous ?")
    
    features = [
        "üìã Renseignements sur les inscriptions et proc√©dures",
        "üìÖ Informations sur les emplois du temps",
        "üéØ Aide √† l'orientation et au choix de parcours",
        "üìñ Support pour vos √©tudes et projets",
        "üè¢ Questions administratives",
        "üí° Conseils acad√©miques personnalis√©s"
    ]
    
    for feature in features:
        st.markdown(f"- {feature}")

def connexion_page():
    """Page de connexion (en d√©veloppement)"""
    st.header("üîê Connexion")
    
    # Avertissement de d√©veloppement
    st.warning("‚ö†Ô∏è **Cette page est en cours de d√©veloppement et n'est pas encore fonctionnelle.**")
    
    # Conteneur centr√© pour le formulaire
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("### üë§ Identifiants UHA")
        
        with st.form("login_form"):
            # Champs de connexion
            username = st.text_input(
                "üìß Nom d'utilisateur ou email :",
                placeholder="ex: prenom.nom@uha.fr"
            )
            
            password = st.text_input(
                "üîí Mot de passe :",
                type="password",
                placeholder="Votre mot de passe UHA"
            )
            
            # Options suppl√©mentaires
            remember_me = st.checkbox("Se souvenir de moi")
            
            # Bouton de connexion
            login_button = st.form_submit_button(
                "üöÄ Se connecter", 
                use_container_width=True
            )
            
            if login_button:
                st.error("üöß Fonctionnalit√© en d√©veloppement - Connexion non disponible")
        
        # Liens utiles
        st.markdown("---")
        st.markdown("### üîó Liens utiles")
        st.markdown("""
        - [Portail √©tudiant UHA](https://e-services.uha.fr/fr/index.html)
        - [R√©initialiser mot de passe](https://e-services.uha.fr/fr/index.html)
        """)
    
    # Informations suppl√©mentaires
    st.markdown("---")
    st.info("""
    **üìã Fonctionnalit√©s pr√©vues apr√®s connexion :**
    - Acc√®s personnalis√© √† vos cours
    - Synchronisation avec votre planning
    - Notifications personnalis√©es
    - Historique de vos conversations
    """)

def liens_utiles_page():
    """Page des liens utiles"""
    st.header("üîó Liens Utiles")
    st.info("üöß Cette fonctionnalit√© est en cours de d√©veloppement.")
    
    st.markdown("""
    ### üìö Liens essentiels :
    - [Portail √©tudiant UHA](https://e-services.uha.fr/fr/index.html)
    - [Site officiel UHA](https://www.uha.fr/)
    - [Site officiel ENSISA](https://www.ensisa.uha.fr/)
    """)

def about_page():
    """Page √Ä propos"""
    st.header("‚ÑπÔ∏è √Ä propos")
    st.markdown("""
    ### üéØ Mission
    Ce chatbot a √©t√© d√©velopp√© pour faciliter la vie √©tudiante √† l'Universit√© de Haute-Alsace.
    
    ### üîß Fonctionnalit√©s
    - Assistant IA aliment√© par Mistral AI
    - Interface utilisateur intuitive
    - R√©ponses contextuelles et personnalis√©es
    
    ### üöÄ D√©veloppement
    Version actuelle : **Beta 1.0**
    
    Ce projet est en constante √©volution pour mieux servir la communaut√© √©tudiante de l'UHA. Ce bot est encore en phase de d√©veloppement et la synchronisation avec la base de donn√©es universitaire n'a pas encore √©t√© effectu√©e.
    """)

def credits_page():
    """Page des cr√©dits"""
    st.header("üë• Cr√©dits")
    st.markdown("""
    ### üèóÔ∏è D√©veloppement
    - **D√©velopp√© par Ayoub**
    - **Technologie IA** : Mistral AI
    - **Framework** : Streamlit

    
    ### üìû Contact
    Pour toute question ou suggestion : ayoub.darkaoui@uha.fr
    """)

# Application principale
def main():
    """Fonction principale de l'application"""
    init_session_state()
    
    # Logo et titre
    try:
        st.image("image_uha.png")
    except:
        st.markdown("üè´ **Universit√© de Haute-Alsace**")
    
    # Barre lat√©rale de navigation
    with st.sidebar:
        st.markdown("### üß≠ Navigation")
        
        # Pages avec ic√¥nes
        pages = [
            "üè† Accueil", 
            "ü§ñ Chatbot", 
            "üîê Connexion", 
            "üîó Liens Utiles", 
            "‚ÑπÔ∏è √Ä Propos", 
            "üë• Cr√©dits"
        ]
        
        # Trouver l'index de la page actuelle
        try:
            current_index = pages.index(st.session_state.selected_page)
        except ValueError:
            # Si la page actuelle n'existe pas dans la nouvelle liste, utiliser Accueil
            current_index = 0
            st.session_state.selected_page = "üè† Accueil"
        
        selected_page = st.radio(
            "Choisir une page :",
            pages,
            index=current_index,
            key="page_selector"
        )
        
        # D√©tecter le changement de page et forcer le rechargement
        if selected_page != st.session_state.selected_page:
            st.session_state.selected_page = selected_page
            st.rerun()
        
        st.markdown("---")
        
        # Informations dans la sidebar
        st.markdown("""
        <div class="sidebar-info">
            <h4>üí° Conseils d'utilisation</h4>
            <p>‚Ä¢ Soyez pr√©cis dans vos questions</p>
            <p>‚Ä¢ N'h√©sitez pas √† demander des clarifications</p>
            <p>‚Ä¢ Le bot garde le contexte de conversation</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Statistiques (simul√©es)
        if st.session_state.messages:
            st.metric("üí¨ Messages √©chang√©s", len(st.session_state.messages))
    
    # Routage des pages
    page_functions = {
        "üè† Accueil": accueil_page,
        "ü§ñ Chatbot": chatbot_page,
        "üîê Connexion": connexion_page,
        "üîó Liens Utiles": liens_utiles_page,
        "‚ÑπÔ∏è √Ä Propos": about_page,
        "üë• Cr√©dits": credits_page
    }
    
    # Afficher la page s√©lectionn√©e
    page_functions[st.session_state.selected_page]()

# Point d'entr√©e de l'application
if __name__ == "__main__":
    main()
