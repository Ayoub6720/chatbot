import streamlit as st
import random
import time
import requests
import json
import os


image="image_uha.png"
# Configuration de la page
st.set_page_config(
    page_title="Chatbot Assistance Acad√©mique",
    page_icon="ü§ñ",
    layout="centered"
)

# Ajouter du CSS personnalis√©
st.markdown("""
<style>


    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: row;
    }
    .chat-message-user {
        background-color: #054cff;
        color: white; /* Couleur du texte pour les messages utilisateur - noir */
    }
    .chat-message-bot {
        background-color: #00b3ff;
        color: white; /* Couleur du texte pour les messages du bot - vert fonc√© */
    }
    .chat-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 1rem;
    }
    .chat-content {
        flex-grow: 1;
    }
</style>
""", unsafe_allow_html=True)

# Titre de l'application
col1, col2 = st.columns([1, 10])

#st.image("image")


st.title("Chatbot de l'UHA ü§ñ")

#Ajout de la barre lat√©ral
st.sidebar.title("Navigation")
selected_page = st.sidebar.radio(
    "Aller vers :", 
    ["Accueil", "Chatbot","Acc√®s √† Moodle", "√Ä propos", "Cr√©dits"]
)

# Contenu principal selon l'onglet s√©lectionn√©
if selected_page == "Accueil":
    st.header("Bienvenue üëã")
    st.write("Utilisez les onglets √† gauche pour naviguer.")
elif selected_page == "Acc√®s √† Moodle":
    st.write("En cours de d√©veloppement.")
    

elif selected_page == "Chatbot":
    
    # Fonction pour appeler l'API Mistral AI
    def get_mistral_response(prompt, api_key):
        url = "https://api.mistral.ai/v1/chat/completions"
        
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        data = {
            "model": "mistral-tiny",  # Ou un autre mod√®le disponible comme "mistral-small", "mistral-medium"
            "messages": [
                {"role": "system", "content": "Vous √™tes un assistant IA qui permet d'assister des etudiants a l'universit√©"},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0,
            
        }
        
        try:
            response = requests.post(url, headers=headers, data=json.dumps(data))
            response.raise_for_status()  # V√©rifier les erreurs HTTP
            result = response.json()
            return result["choices"][0]["message"]["content"]
        except Exception as e:
            st.error(f"Erreur lors de l'appel √† l'API Mistral: {str(e)}")
            return "Je suis d√©sol√©, je rencontre des difficult√©s techniques. Veuillez r√©essayer plus tard."

    # Configuration de la cl√© API
    if "api_key_configured"not in st.session_state:
        st.session_state.api_key_configured = False


    api_key = "QwSJ9Kt4P9zKtgq9iQSA2o17JAbpOJ3b"
        
     

    # Initialiser l'historique de chat s'il n'existe pas
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Fonction pour afficher un message
    def display_message(message, is_user=False):
        avatar = "üë§" if is_user else "üß†"
        message_class = "chat-message-user" if is_user else "chat-message-bot"
        
        st.markdown(f"""
        <div class="chat-message {message_class}">
            <div class="chat-avatar">{avatar}</div>
            <div class="chat-content">
                {message}
            </div>
        </div>
        """, unsafe_allow_html=True)

    # Afficher l'historique des messages
    for message in st.session_state.messages:
        display_message(message["content"], message["is_user"])

    # R√©ponses de secours si l'API n'est pas configur√©e
    fallback_responses = [
        "Je vous remercie pour votre message. Pour des r√©ponses plus intelligentes, veuillez configurer votre cl√© API Mistral AI.",
        "C'est une question int√©ressante. Je pourrais mieux y r√©pondre si vous configurez l'API Mistral AI.",
        "Je comprends votre demande. Pour un meilleur service, veuillez configurer l'API Mistral dans la barre lat√©rale.",
        "Merci de partager cela. Pour d√©bloquer mes capacit√©s, veuillez ajouter une cl√© API Mistral.",
        "Je suis l√† pour vous aider, mais mes r√©ponses seraient plus pertinentes avec l'API Mistral configur√©e."
    ]

    # Zone de saisie pour l'utilisateur avec gestion du formulaire
    with st.form(key="message_form", clear_on_submit=True):
        user_input = st.text_input("√âcrivez votre message ici...", key="user_input")
        submit_button = st.form_submit_button("Envoyer")

    # Traitement du message de l'utilisateur uniquement lorsque le formulaire est soumis
    if submit_button and user_input:
        # Ajouter le message de l'utilisateur √† l'historique
        st.session_state.messages.append({"content": user_input, "is_user": True})
        
        # Simuler la r√©flexion du chatbot
        with st.spinner("En train de r√©fl√©chir..."):
            # V√©rifier si l'API est configur√©e
            if True:
                # Obtenir la r√©ponse de l'API Mistral
                bot_response = get_mistral_response(user_input, api_key)
            else:
                # Utiliser une r√©ponse de secours si l'API n'est pas configur√©e
                time.sleep(2)  # Simuler un d√©lai de r√©ponse
                bot_response = random.choice(fallback_responses)
        
        # Ajouter la r√©ponse du chatbot √† l'historique
        st.session_state.messages.append({"content": bot_response, "is_user": False})
        
        # Forcer le rechargement de la page
        st.rerun()

    # Bouton pour effacer l'historique de conversation
    if st.button("Effacer la conversation"):
        st.session_state.messages = []
        st.rerun()
    
    
    

elif selected_page == "√Ä propos":
    st.header("√Ä propos")
    st.write("Cette application aide les √©tudiants √† l‚Äôuniversit√©.")

elif selected_page == "Cr√©dits":
    st.header("Cr√©dits")
    st.write("D√©velopp√© par Ayoub.")
